<?xml version="1.0" encoding="UTF-8"?>
<project name="HDC1080 sensor" version="2.7.0.155">
    <desc><![CDATA[]]></desc>
    <pattr name="Apply default power mode">0</pattr>
    <pattr name="Board">None</pattr>
    <pattr name="Chip name">CC2640R2F</pattr>
    <pattr name="Chip package">QFN48 7x7 RGZ</pattr>
    <pattr name="Chip revision">-</pattr>
    <pattr name="Clock in active mode">0</pattr>
    <pattr name="Code prefix">hdc1080</pattr>
    <pattr name="Default power mode">0</pattr>
    <pattr name="Operating system">TI-RTOS</pattr>
    <pattr name="Output directory">D:/Projects/Sensor Controller Studio/HDC1080_sensor/scif_files</pattr>
    <pattr name="RTC tick interval (16.16 format)">2000</pattr>
    <pattr name="Run-time logging UART RX pin"></pattr>
    <pattr name="Run-time logging UART TX pin"></pattr>
    <task name="TaskHDC1080">
        <desc><![CDATA[]]></desc>
        <tattr name="ALS_I2C_ADDR" type="expr_hex" content="const" scope="task" min="0" max="65535">0x80</tattr>
        <tattr name="Config_ADR" desc="HDC1080 configuration and status" type="expr_hex" content="const" scope="task" min="0" max="65535">0x02</tattr>
        <tattr name="DEV_ID_ADR" desc="Device ID" type="expr_hex" content="const" scope="task" min="0" max="65535">0xFF</tattr>
        <tattr name="HUM_ADR" type="expr_hex" content="const" scope="task" min="0" max="65535">0x01</tattr>
        <tattr name="MAN_ID_ADR" desc="Manufacturer ID" type="expr_hex" content="const" scope="task" min="0" max="65535">0xFE</tattr>
        <tattr name="MODE_MASK" desc="Mode of acquisition bit" type="expr_hex" content="const" scope="task" min="0" max="65535">0x1000</tattr>
        <tattr name="SerIdFirst_ADR" desc="First 2 bytes of the serial ID reg. address" type="expr_hex" content="const" scope="task" min="0" max="65535">0xFB</tattr>
        <tattr name="SerIdLast_ADR" desc="Last byte of the serial ID reg. address" type="expr_hex" content="const" scope="task" min="0" max="65535">0xFD</tattr>
        <tattr name="SerIdMid_ADR" desc="Mid 2 bytes of the serial ID reg. address" type="expr_hex" content="const" scope="task" min="0" max="65535">0xFC</tattr>
        <tattr name="TMP_ADR" type="expr_hex" content="const" scope="task" min="0" max="65535">0x00</tattr>
        <tattr name="cfg.CfgReadEnable" desc="Enable read HDC1080 configuration and status" type="expr" content="struct" scope="task" min="0" max="1">1</tattr>
        <tattr name="cfg.CfgWriteEnable" desc="Enable write HDC1080 configuration and status" type="expr" content="struct" scope="task" min="0" max="1">1</tattr>
        <tattr name="cfg.DevIdEnable" type="expr" content="struct" scope="task" min="0" max="1">1</tattr>
        <tattr name="cfg.HumEnable" type="expr" content="struct" scope="task" min="0" max="1">1</tattr>
        <tattr name="cfg.ManIdEnable" type="expr" content="struct" scope="task" min="0" max="1">1</tattr>
        <tattr name="cfg.MeasureBothEnable" type="expr" content="struct" scope="task" min="0" max="1">1</tattr>
        <tattr name="cfg.SerIdEnable" desc="Enable Serial ID" type="expr" content="struct" scope="task" min="0" max="1">1</tattr>
        <tattr name="cfg.TmpEnable" type="expr" content="struct" scope="task" min="0" max="1">1</tattr>
        <tattr name="input.CfgData" type="expr_hex" content="struct" scope="task" min="0" max="65535">0x1000</tattr>
        <tattr name="output.ConfigValue" desc="Configuration register value" type="expr_hex" content="struct" scope="task" min="0" max="65535">0xFFFF</tattr>
        <tattr name="output.ErrFlag" type="expr" content="struct" scope="task" min="0" max="1">0</tattr>
        <tattr name="output.SerIdFirst" desc="First 2 bytes of the serial ID of the part" type="expr_hex" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.SerIdLast" desc="Last byte bit of the serial ID of the part" type="expr_hex" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.SerIdMid" desc="Mid 2 bytes of the serial ID of the part" type="expr_hex" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.devID" type="expr_hex" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.hum" type="expr" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.manID" type="expr_hex" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.tmp" type="expr" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <resource_ref name="ADC" enabled="0"/>
        <resource_ref name="AON Domain Functionality" enabled="0"/>
        <resource_ref name="Accumulator-Based Math" enabled="0"/>
        <resource_ref name="Analog Open-Drain Pins" enabled="0"/>
        <resource_ref name="Analog Open-Source Pins" enabled="0"/>
        <resource_ref name="Analog Pins" enabled="0"/>
        <resource_ref name="COMPA" enabled="0"/>
        <resource_ref name="COMPA Event Trigger" enabled="0"/>
        <resource_ref name="COMPB" enabled="0"/>
        <resource_ref name="COMPB Event Trigger" enabled="0"/>
        <resource_ref name="Delay Insertion" enabled="1"/>
        <resource_ref name="Differential Output Pins" enabled="0"/>
        <resource_ref name="Digital Input Pins" enabled="0"/>
        <resource_ref name="Digital Open-Drain Pins" enabled="0"/>
        <resource_ref name="Digital Open-Source Pins" enabled="0"/>
        <resource_ref name="Digital Output Pins" enabled="0"/>
        <resource_ref name="Dynamic Power Control" enabled="0"/>
        <resource_ref name="GPIO Event Trigger" enabled="0"/>
        <resource_ref name="I2C Master" enabled="1">
            <rattr name="SCL frequency">0</rattr>
            <rattr name="SCL stretch timeout">20000</rattr>
            <io_usage>
                <uattr name="SCL pin/0000">DIO4</uattr>
                <uattr name="SDA pin/0000">DIO5</uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="ISRC" enabled="0"/>
        <resource_ref name="LCD Controller" enabled="0">
            <rattr name="Waveform state count">8</rattr>
            <io_usage>
                <uattr name="Output drive strength">0</uattr>
                <uattr name="Pin count">20</uattr>
                <uattr name="Pin/0000"></uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
                <uattr name="Pin/0016"></uattr>
                <uattr name="Pin/0017"></uattr>
                <uattr name="Pin/0018"></uattr>
                <uattr name="Pin/0019"></uattr>
                <uattr name="Pin/0020"></uattr>
                <uattr name="Pin/0021"></uattr>
                <uattr name="Pin/0022"></uattr>
                <uattr name="Pin/0023"></uattr>
                <uattr name="Pin/0024"></uattr>
                <uattr name="Pin/0025"></uattr>
                <uattr name="Pin/0026"></uattr>
                <uattr name="Pin/0027"></uattr>
                <uattr name="Pin/0028"></uattr>
                <uattr name="Pin/0029"></uattr>
                <uattr name="Pin/0030"></uattr>
                <uattr name="Pin/0031"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Math and Logic" enabled="0"/>
        <resource_ref name="Multi-Buffered Output Data Exchange" enabled="0">
            <rattr name="Buffer count">2</rattr>
            <rattr name="Indicate overflow at buffer check">1</rattr>
            <rattr name="Indicate overflow at buffer switch">0</rattr>
            <rattr name="Prevent overflow at buffer switch">1</rattr>
        </resource_ref>
        <resource_ref name="Peripheral Sharing" enabled="0"/>
        <resource_ref name="Pulse Counter" enabled="0"/>
        <resource_ref name="RTC Multi-Event Capture" enabled="0"/>
        <resource_ref name="RTC-Based Execution Scheduling" enabled="1"/>
        <resource_ref name="Reference DAC" enabled="0"/>
        <resource_ref name="Run-Time Logging" enabled="0"/>
        <resource_ref name="SPI Chip Select" enabled="0"/>
        <resource_ref name="SPI Data Transfer" enabled="0">
            <rattr name="Bit rate">0</rattr>
            <rattr name="MISO configuration when inactive">-1</rattr>
            <rattr name="MOSI configuration on initialization">0</rattr>
            <rattr name="MOSI configuration on uninitialization">0</rattr>
            <rattr name="SCLK configuration on initialization">0</rattr>
            <rattr name="SCLK configuration on uninitialization">0</rattr>
            <io_usage>
                <uattr name="MISO pin/0000"></uattr>
                <uattr name="MOSI pin/0000"></uattr>
                <uattr name="SCLK pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Signal Observation" enabled="0"/>
        <resource_ref name="System CPU Alert" enabled="1"/>
        <resource_ref name="System Event Trigger" enabled="0"/>
        <resource_ref name="TDC" enabled="0"/>
        <resource_ref name="Timer 0" enabled="0"/>
        <resource_ref name="Timer 0 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 1" enabled="0"/>
        <resource_ref name="Timer 1 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 2" enabled="0"/>
        <resource_ref name="Timer 2 Event Trigger" enabled="0"/>
        <resource_ref name="UART Emulator" enabled="0">
            <rattr name="RX buffer size">64</rattr>
            <rattr name="Required idle period before enabling RX">11</rattr>
            <rattr name="TX buffer size">64</rattr>
            <io_usage>
                <uattr name="RX pin/0000"></uattr>
                <uattr name="TX pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <sccode name="event0" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event1" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event2" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event3" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="execute" init_power_mode="0"><![CDATA[//=============================================================================================
//macro CheckError() {
//    fwDelayUs(15000,FW_DELAY_RANGE_100_MS);  // Wait 5ms
//    if(state.i2cStatus==1) {
//        output.ErrFlag=1;
//    }
//}
//=============================================================================================
macro HDC1080_WriteConfigReg(data) {
    i2cDeviceWriteReg16MsbFirst(ALS_I2C_ADDR, Config_ADR, data);
    //    CheckError();
}
//=============================================================================================
macro HDC1080_ReadReg(result, RegAddr) {
    i2cDeviceReadReg16MsbFirst(ALS_I2C_ADDR, RegAddr; result);
    //    CheckError();
}
//=============================================================================================
macro HDC1080_Measure(result,RegAddr) {
    //    HDC1080_SetPointerReg(Param);
    //
    i2cStart();
    i2cTx(I2C_OP_WRITE | ALS_I2C_ADDR); // Write slave address
    //-----
    i2cTx(RegAddr);  // Write in pointer reg. the target reg. address
    //-----
    fwDelayUs(15000,FW_DELAY_RANGE_100_MS);  // Wait 15 ms
    //-----
    i2cRepeatedStart();
    i2cTx(I2C_OP_READ | ALS_I2C_ADDR); // Read slave address
    //-----
    U16 RegM;
    U16 RegL;
    //-----
    i2cRxAck(RegM);  // Read DataMSB from slave
    i2cRxNack(RegL);  // Read DataLSB from slave
    //-----
    i2cStop();
    //------------------------------------------------------------------------------------------
    result = (RegM << 8) + RegL;
}
//=============================================================================================
macro HDC1080_MeasureBoth() {
    //-----------------------------------------------------------------------------------------
    U16 RegM;
    U16 RegL;
    //-----
    i2cStart();
    i2cTx(I2C_OP_WRITE | ALS_I2C_ADDR); // Write slave address
    //-----
    i2cTx(0);  // Write in pointer reg. the Temp. reg. address
    //-----
    fwDelayUs(15000,FW_DELAY_RANGE_100_MS);  // Wait 15 ms
    //-----
    i2cRepeatedStart();
    i2cTx(I2C_OP_READ | ALS_I2C_ADDR); // Read slave address
    //-----
    i2cRxAck(RegM);  // Read DataMSB from slave
    i2cRxAck(RegL);  // Read DataLSB from slave
    //-----
    output.tmp = (RegM << 8) + RegL;
    //-----
    i2cRxAck(RegM);  // Read DataMSB from slave
    i2cRxNack(RegL);  // Read DataLSB from slave
    //-----
    output.hum = (RegM << 8) + RegL;
    //-----
    i2cStop();
    //-----------------------------------------------------------------------------------------
}
//=============================================================================================
U16 result=0;

//cfg.Test=MeasureBothEnable;
//-----
if(cfg.CfgWriteEnable != 0) {
    HDC1080_WriteConfigReg(input.CfgData);
    if(state.i2cStatus==0) {
        cfg.CfgWriteEnable = 0;
        cfg.CfgReadEnable = 1;
    }
}
//-----
if(cfg.CfgReadEnable != 0) {
    HDC1080_ReadReg(result, Config_ADR);
    if(state.i2cStatus==0) {
        output.ConfigValue = result;
        cfg.CfgReadEnable = 0;
        //---
        if(result & MODE_MASK) {
            cfg.MeasureBothEnable = 1;
        } else {
            cfg.MeasureBothEnable = 0;
        }
        //---
    }
}
//-----
if(cfg.ManIdEnable != 0) {
    HDC1080_ReadReg(result, MAN_ID_ADR);
    if(state.i2cStatus==0) {
        output.manID = result;
        cfg.ManIdEnable = 0;
    }
}
//-----
if(cfg.DevIdEnable != 0) {
    HDC1080_ReadReg(result, DEV_ID_ADR);
    if(state.i2cStatus==0) {
        output.devID = result;
        cfg.DevIdEnable = 0;
    }
}
//----------------------------------------
if(cfg.SerIdEnable != 0) {
    U16 err=0;
    //-----
    HDC1080_ReadReg(result, SerIdFirst_ADR);
    if(state.i2cStatus==0) {
        output.SerIdFirst = result;
    } else {
        err=1;
    }
    //-----
    HDC1080_ReadReg(result, SerIdMid_ADR);
    if(state.i2cStatus==0) {
        output.SerIdMid = result;
    } else {
        err=1;
    }
    //-----
    HDC1080_ReadReg(result, SerIdLast_ADR);
    if(state.i2cStatus==0) {
        output.SerIdLast = result;
    } else {
        err=1;
    }
    //-----
    if(err==0) {
        cfg.SerIdEnable = 0;
    }
    //-----
}
//----------------------------------------
if(cfg.MeasureBothEnable ==1) {
    HDC1080_MeasureBoth();
} else {
    //-----
    if(cfg.TmpEnable != 0) {
        HDC1080_Measure(result, TMP_ADR);
        output.tmp = result;
    }
    //-----
    if(cfg.HumEnable != 0) {
        HDC1080_Measure(result,HUM_ADR);
        output.hum = result;
    }
    //-----
}
//==============================================================================================
// Schedule the next execution
fwScheduleTask(1);
//----------------------------------------------------------------------------------------------
// Notify the application
fwGenAlertInterrupt();
//----------------------------------------------------------------------------------------------]]></sccode>
        <sccode name="initialize" init_power_mode="0"><![CDATA[// Schedule the first execution
fwScheduleTask(1);]]></sccode>
        <sccode name="terminate" init_power_mode="0"><![CDATA[// Cancel the potentially active event trigger
//evhCancelTrigger(0);]]></sccode>
        <event_trigger active_count="1">0,1,2,3</event_trigger>
        <tt_iter>wait_100ms,run_execute,wait_100ms</tt_iter>
        <tt_struct>state.i2cStatus</tt_struct>
        <rtl_struct></rtl_struct>
        <rtl_task_sel en="1" struct_log_list="output"/>
    </task>
</project>
